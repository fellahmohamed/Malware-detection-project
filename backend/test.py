import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'  # Suppress TensorFlow logging
os.environ['CUDA_VISIBLE_DEVICES'] = '-1'  # Optional: limit TensorFlow to CPU
from tensorflow import keras
from fastapi import FastAPI, File, UploadFile
from pydantic import BaseModel
from data_preprocessing import PEFeatureExtractor
from fastapi.responses import JSONResponse
import xgboost as xgb
import lightgbm as lgb
import numpy as np
import uvicorn
import traceback
from fastapi.middleware.cors import CORSMiddleware
import logging

logging.basicConfig(level=logging.DEBUG)

feature_extractor = PEFeatureExtractor()

xgboost_model = xgb.Booster()
xgboost_model.load_model('XGB_fold0.xgb')
lgbm_model = lgb.Booster(model_file='LGBM_fold0.txt')
cnn_model = keras.models.load_model('cnn_model_1.h5')
mlp_model = keras.models.load_model('mlp.h5')

origins = ["*"]

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

print(mlp_model.summary())

class PredictionResponse(BaseModel):
    xgboost: str
    # cnn: str
    # mlp: str

@app.post("/predict", response_model=PredictionResponse)
async def predict(file: UploadFile = File(...)):
    try:
        file_bytes = await file.read()
    except Exception as e:
        return JSONResponse(status_code=500, content={"message": str(e)})
    
    try:
        logging.debug("Starting feature extraction")
        feature_vector = feature_extractor.feature_vector(file_bytes)
        logging.debug("Feature extraction completed")
    except Exception:
        logging.error("Feature extraction failed", exc_info=True)
        return JSONResponse(status_code=500, content={"message": "Feature extraction failed"})
    
    sample = np.array(feature_vector).reshape(1, -1)

    xgboost_dmatrix = xgb.DMatrix(sample)
    xgboost_prediction = xgboost_model.predict(xgboost_dmatrix)
    xgboost_result = 'malware' if xgboost_prediction[0] > 0.5 else 'benign'

    return PredictionResponse(
        xgboost=xgboost_result,
        # cnn=cnn_result,
        # mlp=mlp_result
    )

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
